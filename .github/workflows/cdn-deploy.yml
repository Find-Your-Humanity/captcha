name: CDN Deploy

on:
  push:
    branches: [ main, develop, dev-cdn ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Build for CDN
      run: npm run build:cdn
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cdn-build
        path: dist-cdn/
        retention-days: 30

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: cdn-build
        path: dist-cdn/
        
    - name: Deploy to Staging CDN
      env:
        CDN_PROVIDER: ${{ vars.CDN_PROVIDER || 'kakao' }}
        # Ïπ¥Ïπ¥Ïò§ÌÅ¥ÎùºÏö∞Îìú ÏÑ§Ï†ï
        KAKAO_ACCESS_KEY: ${{ secrets.KAKAO_ACCESS_KEY }}
        KAKAO_SECRET_KEY: ${{ secrets.KAKAO_SECRET_KEY }}
        KAKAO_REGION: ${{ vars.KAKAO_REGION || 'kr-central-1' }}
        KAKAO_CDN_BUCKET: ${{ vars.STAGING_KAKAO_BUCKET }}
        KAKAO_CDN_DOMAIN: ${{ vars.STAGING_KAKAO_DOMAIN }}
        # AWS ÏÑ§Ï†ï (ÎåÄÏïà)
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CDN_S3_BUCKET: ${{ vars.STAGING_S3_BUCKET }}
        CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.STAGING_CLOUDFRONT_ID }}
      run: |
        if [ "$CDN_PROVIDER" = "kakao" ]; then
          npm run deploy:kakao
        else
          npm run deploy:cdn
        fi

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --legacy-peer-deps
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: cdn-build
        path: dist-cdn/
        
    - name: Deploy to Production CDN
      env:
        CDN_PROVIDER: ${{ vars.CDN_PROVIDER || 'kakao' }}
        # Ïπ¥Ïπ¥Ïò§ÌÅ¥ÎùºÏö∞Îìú ÏÑ§Ï†ï
        KAKAO_ACCESS_KEY: ${{ secrets.KAKAO_ACCESS_KEY }}
        KAKAO_SECRET_KEY: ${{ secrets.KAKAO_SECRET_KEY }}
        KAKAO_REGION: ${{ vars.KAKAO_REGION || 'kr-central-1' }}
        KAKAO_CDN_BUCKET: ${{ vars.PRODUCTION_KAKAO_BUCKET }}
        KAKAO_CDN_DOMAIN: ${{ vars.PRODUCTION_KAKAO_DOMAIN }}
        # AWS ÏÑ§Ï†ï (ÎåÄÏïà)
        AWS_REGION: ${{ vars.AWS_REGION }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        CDN_S3_BUCKET: ${{ vars.PRODUCTION_S3_BUCKET }}
        CLOUDFRONT_DISTRIBUTION_ID: ${{ vars.PRODUCTION_CLOUDFRONT_ID }}
      run: |
        if [ "$CDN_PROVIDER" = "kakao" ]; then
          npm run deploy:kakao
        else
          npm run deploy:cdn
        fi
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## CDN Î∞∞Ìè¨ ÏôÑÎ£å
          
          üéâ Real Captcha Widget ${{ github.ref }}Í∞Ä CDNÏóê ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞∞Ìè¨ÎêòÏóàÏäµÎãàÎã§.
          
          ### üîó CDN URLs
          - **ÏµúÏã† Î≤ÑÏ†Ñ**: `https://cdn.realcaptcha.com/latest/realcaptcha-widget.min.js`
          - **Í≥†Ï†ï Î≤ÑÏ†Ñ**: `https://cdn.realcaptcha.com/${{ github.ref }}/realcaptcha-widget.min.js`
          - **ÏÇ¨Ïö© ÏòàÏ†ú**: `https://cdn.realcaptcha.com/${{ github.ref }}/example.html`
          
          ### üìñ ÏÇ¨Ïö©Î≤ï
          ```html
          <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
          <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
          <script src="https://cdn.realcaptcha.com/latest/realcaptcha-widget.min.js"></script>
          
          <div id="captcha-container"></div>
          <script>
            renderRealCaptcha('captcha-container', {
              theme: 'light',
              size: 'normal'
            }, function(result) {
              console.log('Ï∫°Ï∞® Í≤∞Í≥º:', result);
            });
          </script>
          ```
        draft: false
        prerelease: false